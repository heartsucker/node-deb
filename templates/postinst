#!/bin/bash
# This file was autogenerated by node-deb {{ node_deb_version }}
set -e
set -o pipefail

declare -r init_type='{{ node_deb_init }}'
declare -ri no_rebuild='{{ node_deb_no_rebuild }}'

add_user() {
  : "${1:?'User was not defined'}"
  declare -r user="$1"
  declare -r uid="$2"

  if [ -z "$uid" ]; then
    declare -r uid_flags=""
  else
    declare -r uid_flags="--uid $uid"
  fi

  declare -r group="${3:-$user}"
  declare -r descr="${4:-No description}"
  declare -r shell="${5:-/bin/false}"

  if ! getent passwd | grep -q "^$user:"; then
    echo "Creating system user: $user in $group with $descr and shell $shell"
    useradd $uid_flags --gid $group --no-create-home --system --shell $shell -c "$descr" $user
  fi
}

add_group() {
  : "${1:?'Group was not defined'}"
  declare -r group="$1"
  declare -r gid="$2"

  if [ -z "$gid" ]; then
    declare -r gid_flags=""
  else
    declare -r gid_flags="--gid $gid"
  fi

  if ! getent group | grep -q "^$group:" ; then
    echo "Creating system group: $group"
    groupadd $gid_flags --system $group
  fi
}

start_service () {
  : "${1:?'Service name was not defined'}"
  declare -r service_name="$1"

  if hash systemctl 2> /dev/null; then
    if [[ "$init_type" == 'auto' || "$init_type" == 'systemd' ]]; then
      {
        systemctl enable "$service_name.service" && \
        systemctl start "$service_name.service"
      } || echo "$service_name could not be registered or started" # using `|| echo` to ensure script exits with 0. Failure to start is not failure to install
    fi
  elif hash service 2> /dev/null; then
    if [[ "$init_type" == 'auto' || "$init_type" == 'upstart' ]]; then
      service "$service_name" start || echo "$service_name could not be registered or started" # using `|| echo` to ensure script exits with 0. Failure to start is not failure to install
    fi
  elif hash start 2> /dev/null; then
    if [[ "$init_type" == 'auto' || "$init_type" == 'upstart' ]]; then
      start "$service_name" || echo "$service_name could not be registered or started" # using `|| echo` to ensure script exits with 0. Failure to start is not failure to install
    fi
  else
    # using `echo` to ensure script exits with 0. Failure to start is not failure to install
    echo 'Your system does not appear to use upstart or systemd, so the service could not be started'
  fi
}

npm_install() {
  : "${1:?'Package name was not defined'}"
  cd "/usr/share/$1/app"

  if [ ! -d './node_modules' ]; then
    echo "Directory 'node_modules' did not exist. Running 'npm install'"
    npm install --production
  else
    if [ "$no_rebuild" -eq 0 ]; then
      echo "Directory 'node_modules' exists. Running 'npm rebuild'"
      npm rebuild --production
    fi
  fi
}

add_group '{{ node_deb_group }}' ''
add_user '{{ node_deb_user }}' '' '{{ node_deb_group }}' '{{ node_deb_user }} user-daemon' '/bin/false'
npm_install '{{ node_deb_package_name }}'

mkdir -p '/var/log/{{ node_deb_package_name }}'

chown -R '{{ node_deb_user }}:{{ node_deb_group }}' '/var/log/{{ node_deb_package_name }}' '/usr/share/{{ node_deb_package_name }}/app'

if [[ "$init_type" == 'auto' ]] || [[ "$init_type" == 'systemd' ]] || [[ "$init_type" == 'upstart' ]]; then
  start_service '{{ node_deb_package_name }}'
fi
